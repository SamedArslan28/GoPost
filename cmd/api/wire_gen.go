// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/SamedArslan28/gopost/internal/config"
	"github.com/SamedArslan28/gopost/internal/database"
	"github.com/SamedArslan28/gopost/internal/handler"
	"github.com/SamedArslan28/gopost/internal/repository"
	"github.com/SamedArslan28/gopost/internal/service"
)

// Injectors from wire.go:

// InitializeApp tells Wire how to build the server, accepting the app config as input.
// It references the helper providers located in your providers.go file.
func InitializeApp(cfg config.Config) (*Server, error) {
	string2 := provideDatabaseDsn(cfg)
	db, err := database.ConnectDB(string2)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	userHandler := provideUserHandler(userService)
	server := NewServer(userHandler)
	return server, nil
}

// wire.go:

func provideDatabaseDsn(cfg config.Config) string {
	return cfg.DatabaseURL
}

// provideUserHandler is a helper provider.
// Your original code was: handler.NewUserHandler(*userService)
// This function replicates that logic so Wire can use it.
func provideUserHandler(userService *service.UserService) handler.UserHandler {
	userHandlerPointer := handler.NewUserHandler(*userService)
	return *userHandlerPointer
}
